
import rospy
import os
import sys

sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))

from nodes.PPOAgent.train import TrainPPO
from nodes.DQN.train import TrainDQN
from nodes.SAC.train import TrainSAC
from src.turtlebot3_dqn.environment import Env
 
if __name__ == '__main__':
    rospy.init_node('turtlebot3_dqn_stage_1')

    number_of_coins = rospy.get_param("number_of_coins", 0)
    using_camera = rospy.get_param("using_camera", 0)
    algorithm = rospy.get_param("algorithm", "DQN")

    # 360 is the size of LIDAR (360 lasers) we add 2 values of angle and distance to goal
    # the other 2 values are the angle and distance of the closer obstacle and we will add also
    # the distance to each coin so we add the number of coins
    # Al diablo hay que meter aqui como hacer las dims si se usa la camara!!!
    if using_camera:
        # Should use something like this?
        # state_size = np.ndarray(480, 640, 3)
        pass
    else:
        state_size = 360 + 2 + 2 + number_of_coins
    
    action_size = 5

    env = Env(action_size, using_camera, number_of_coins)

    if algorithm == "SAC":
        train_instance = TrainSAC(state_size = state_size, action_size=action_size, env=env)
    elif algorithm == "PPO":
        train_instance = TrainPPO(state_size = state_size, action_size=action_size, env=env)
    else:
        train_instance = TrainDQN(state_size = state_size, action_size=action_size, env=env)

    train_instance.train()
