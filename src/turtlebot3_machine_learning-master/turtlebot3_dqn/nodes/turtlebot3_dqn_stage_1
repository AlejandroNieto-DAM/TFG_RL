
import rospy
import os
import json
import numpy as np
import random
import time
import sys
import threading

sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from collections import deque
from std_msgs.msg import Float32MultiArray
from src.turtlebot3_dqn.environment_stage_1 import Env
from nodes.PPOAgent.agent import PPOAgent
from nodes.SAC.agent import SAC
from keras.models import Sequential, load_model
from keras.optimizers import RMSprop
from keras.layers import Dense, Dropout, Activation




EPISODES = 3000

def body_dqn():
    rospy.init_node('turtlebot3_dqn_stage_1')
    pub_result = rospy.Publisher('result', Float32MultiArray, queue_size=5)
    pub_get_action = rospy.Publisher('get_action', Float32MultiArray, queue_size=5)
    result = Float32MultiArray()
    get_action = Float32MultiArray()

    state_size = 362
    action_size = 5

    env = Env(action_size)

    agent = ReinforceAgent(state_size, action_size)
                        
    scores, episodes = [], []
    global_step = 0
    start_time = time.time()

    for e in range(agent.load_episode + 1, EPISODES):
        done = False
        state = env.reset()
        score = 0
        for t in range(agent.episode_step):
            action = agent.getAction(state)

            next_state, reward, done = env.step(action)

            agent.appendMemory(state, action, reward, next_state, done)

            if len(agent.memory) >= agent.train_start:
                print("Entrooo")
                if global_step <= agent.target_update:
                    agent.trainModel()
                else:
                    agent.trainModel(True)
                print("Salgo")

            score += reward
            state = next_state
            get_action.data = [action, score, reward]
            pub_get_action.publish(get_action)

            if e % 10 == 0:
                agent.model.save(agent.dirPath + str(e) + '.h5')
                with open(agent.dirPath + str(e) + '.json', 'w') as outfile:
                    json.dump(param_dictionary, outfile)

            if t >= 500:
                rospy.loginfo("Time out!!")
                done = True

            if done:
                result.data = [score, np.max(agent.q_value)]
                pub_result.publish(result)
                agent.updateTargetModel()
                scores.append(score)
                episodes.append(e)
                m, s = divmod(int(time.time() - start_time), 60)
                h, m = divmod(m, 60)

                rospy.loginfo('Ep: %d score: %.2f memory: %d epsilon: %.2f time: %d:%02d:%02d',
                              e, score, len(agent.memory), agent.epsilon, h, m, s)
                param_keys = ['epsilon']
                param_values = [agent.epsilon]
                param_dictionary = dict(zip(param_keys, param_values))
                break

            global_step += 1
            if global_step % agent.target_update == 0:
                rospy.loginfo("UPDATE TARGET NETWORK")

        if agent.epsilon > agent.epsilon_min:
            agent.epsilon *= agent.epsilon_decay

def body_ppo_agent():
    rospy.init_node('turtlebot3_dqn_stage_1')
    pub_result = rospy.Publisher('result', Float32MultiArray, queue_size=5)
    pub_get_action = rospy.Publisher('get_action', Float32MultiArray, queue_size=5)
    result = Float32MultiArray()
    get_action = Float32MultiArray()

    state_size = 362 + 1
    action_size = 5
    N = 100
    n_steps = 0
    learn_iters = 0
    score_history = []
    best_score = 200
    target_update = 2000
    env = Env(action_size)

    agent = PPOAgent(n_actions = action_size, batch_size = 5, alpha=0.0003,
                        n_epochs=4, input_dims=state_size)
                        
    scores, episodes = [], []
    global_step = 0
    start_time = time.time()

    for e in range(EPISODES):
        done = False
        state = env.reset()
        score = 0
        for t in range(6000):
            action, prob, val = agent.choose_action(state)
            action = 2
            state_, reward, done = env.step(action)

            n_steps += 1

            agent.store_transition(state, action,
                                   prob, val, reward, done)

            if n_steps % N == 0:
                env.pause_simulation()
                agent.learn()
                env.unpause_proxy()
                learn_iters += 1

            state = state_
            score += reward

            rospy.loginfo("Action --> " + str(action) + " Probs --> " + str(prob) + " Reward --> " + str(reward))


            if t >= 500:
                rospy.loginfo("Time out!!")
                done = True


            if done:
                score_history.append(score)
                avg_score = np.mean(score_history[-100:])

                #if avg_score > best_score:
                #    best_score = avg_score
                #    agent.save_models()

                #result.data = [score, 200]
                #pub_result.publish(result)

                #scores.append(score)
                #episodes.append(e)
                #m, s = divmod(int(time.time() - start_time), 60)
                #h, m = divmod(m, 60)

                #rospy.loginfo('Ep: %d score: %.2f memory: %d epsilon: %.2f time: %d:%02d:%02d', e, score, len(agent.memory.states), agent.gamma, h, m, s)
                break

def body_sac_agent():
    rospy.init_node('turtlebot3_dqn_stage_1')
    pub_result = rospy.Publisher('result', Float32MultiArray, queue_size=5)
    pub_get_action = rospy.Publisher('get_action', Float32MultiArray, queue_size=5)
    result = Float32MultiArray()
    get_action = Float32MultiArray()

    state_size = 362
    action_size = 5
    N = 100
    n_steps = 0
    learn_iters = 0
    score_history = []
    best_score = 200
    target_update = 2000
    env = Env(action_size)

    agent = SAC()

                    
                        
    scores, episodes = [], []
    global_step = 0
    start_time = time.time()

    for e in range(EPISODES):
        done = False
        state = env.reset()
        score = 0
        for t in range(6000):
            action, prob, val = agent.choose_action(state)

            state_, reward, done = env.step(action)

            n_steps += 1

            agent.store_transition(state, action,
                                   prob, val, reward, done)

            if n_steps % N == 0:
                env.pause_simulation()
                agent.learn()
                env.unpause_proxy()
                learn_iters += 1

            state = state_
            score += reward

            rospy.loginfo("Action --> " + str(action) + " Probs --> " + str(prob) + " Reward --> " + str(reward))


            if t >= 500:
                rospy.loginfo("Time out!!")
                done = True


            if done:
                score_history.append(score)
                avg_score = np.mean(score_history[-100:])

                #if avg_score > best_score:
                #    best_score = avg_score
                #    agent.save_models()

                #result.data = [score, 200]
                #pub_result.publish(result)

                #scores.append(score)
                #episodes.append(e)
                #m, s = divmod(int(time.time() - start_time), 60)
                #h, m = divmod(m, 60)

                #rospy.loginfo('Ep: %d score: %.2f memory: %d epsilon: %.2f time: %d:%02d:%02d', e, score, len(agent.memory.states), agent.gamma, h, m, s)
                break

if __name__ == '__main__':
    body_ppo_agent()
    #body_dqn()